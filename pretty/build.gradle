buildscript {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'

// general project info

group = 'com.madisp.pretty'
version = '0.1.1'
if (!project.hasProperty('release')) {
    version = version + '-SNAPSHOT'
}

project.sourceCompatibility = '1.6'
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

repositories {
    mavenCentral()
}

configurations {
    provided
}

sourceSets {
    main { compileClasspath += configurations.provided }
}

dependencies {
    compile 'org.jetbrains:annotations:13.0'
    provided 'org.robolectric:android-all:5.0.0_r2-robolectric-0'
}

// jar with sources

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

// jar with javadocs

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}
task javadocJar(type: Jar, dependsOn: javadocs) {
    from javadocs.destinationDir
}

publishing {
    repositories {
        maven {
            name 'dry'
            url "$buildDir/repo"
        }
        maven {
            name 'snapshots'
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            credentials {
                username = System.getenv("SONATYPE_OSS_USER")
                password = System.getenv("SONATYPE_OSS_PASS")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
            pom.withXml {
                // modify the dependencies
                def fixdeps = ['org.jetbrains:annotations':'compile', 'com.google.android:android':'provided']
                asNode().dependencies.dependency.each { dep ->
                    def depId = "${dep.groupId.text()}:${dep.artifactId.text()}"
                    if (fixdeps[depId]) {
                        println fixdeps[depId]
                        println dep.scope.get(0).setValue(fixdeps[depId])
                    }
                }
                // add all the extra information
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'pretty'
                    description 'A convenience library to process View attributes in Android layout files at runtime.'
                    url 'http://github.com/madisp/pretty'
                    scm {
                        url 'http://github.com/madisp/pretty'
                        connection 'scm:git:git://github.com/madisp/pretty.git'
                        developerConnection 'scm:git:ssh://git@github.com/madisp/pretty.git'
                    }
                    issueManagement {
                        system 'GitHub'
                        url 'http://github.com/madisp/pretty/issues'
                    }
                    developers {
                        developer {
                            id 'madisp'
                            name 'Madis Pink'
                            email 'madis.pink@gmail.com'
                        }
                    }
                    licenses {
                        license {
                            name 'The MIT License'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}
